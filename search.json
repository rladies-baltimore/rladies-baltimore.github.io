[
  {
    "objectID": "coc.html",
    "href": "coc.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "The leadership, mentoring & teaching roles within this Community are held exclusively by minority genders (majority gender speakers may be allowed/invited as one-off guests in exceptional circumstances at the leadership team’s discretion). Due to unexpected demand, we have opened learning participation to all genders, dependent on initial and on-going vetting by the leadership team. However, the stated priority of the R-Ladies communities is the development & support specifically of those identifying as a minority gender, and we, therefore, reserve the right to guard this interest through whatever measures the leadership team deems appropriate. Anyone involved with R-Ladies Baltimore is expected to fully respect each other, the mandate of this community, and the goodwill on which R-Ladies is founded, or face expulsion/a penalty of any form, at the discretion of the leadership team.\nFull community guidelines are found here: rladies/starter-kit/wiki."
  },
  {
    "objectID": "coc.html#photos-films-and-all-other-mediarecordings",
    "href": "coc.html#photos-films-and-all-other-mediarecordings",
    "title": "Code of Conduct",
    "section": "Photos, Films and all other media/recordings:",
    "text": "Photos, Films and all other media/recordings:\nPhotos, Films, and all other media/recordings: photographs and/or video/other media will be taken at events held by this community. By taking part in an R-Ladies Baltimore event you grant the community organizers full rights to use the images resulting from the photography/video filming/media, and any reproductions or adaptations of the images for publicity, fundraising or other purposes to help achieve the community’s aims. This might include (but is not limited to), the right to use them in their printed and online publicity, social media, press releases and funding applications. If you do not wish to be recorded in these media please inform a community organizer."
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 Margaret Taub\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R-Ladies Baltimore",
    "section": "",
    "text": "R-Ladies Baltimore welcomes members of all R proficiency levels, whether you’re a new or aspiring R user, or an experienced R programmer interested in mentoring, networking & expert upskilling. Our non-profit, civil society community is designed to develop our members’ R skills & knowledge through social, collaborative learning & sharing. Supporting minority identity access to STEM skills & careers, the Free Software Movement, and contributing to the global R community!\n\n\nA local chapter of R-Ladies Global, R-Ladies Baltimore exists to promote gender diversity in the R community worldwide. We are pro-actively inclusive of queer, trans, and all minority identities, with additional sensitivity to intersectional identities. Our priority is to provide a safe community space for anyone identifying as a minority gender who is interested in and/or working with R. As a founding principle, there is no cost or charge to participate in any of our R-Ladies communities around the world.\nWe are part of Global R-Ladies group. Here are some links! You can access our presentations, R scripts and more on our Github account and follow us on twitter to stay up to date about R-Ladies news!\n\n\n\n\nEvent details: Meetup page\nGitHub: github.com/rladies-baltimore\nTwitter: RLadiesBmore\n\nPresentation slides and materials from meetup events can be found the global R-Ladies GitHub page.\nFor more information about R-Ladies Global, visit rladies.org.\n\n\n\nWhen attending R-Ladies Baltimore Events, use the Getting Started guide to help get you up and running and plugged into our local community"
  },
  {
    "objectID": "index.html#who-are-we",
    "href": "index.html#who-are-we",
    "title": "R-Ladies Baltimore",
    "section": "",
    "text": "A local chapter of R-Ladies Global, R-Ladies Baltimore exists to promote gender diversity in the R community worldwide. We are pro-actively inclusive of queer, trans, and all minority identities, with additional sensitivity to intersectional identities. Our priority is to provide a safe community space for anyone identifying as a minority gender who is interested in and/or working with R. As a founding principle, there is no cost or charge to participate in any of our R-Ladies communities around the world.\nWe are part of Global R-Ladies group. Here are some links! You can access our presentations, R scripts and more on our Github account and follow us on twitter to stay up to date about R-Ladies news!"
  },
  {
    "objectID": "index.html#information",
    "href": "index.html#information",
    "title": "R-Ladies Baltimore",
    "section": "",
    "text": "Event details: Meetup page\nGitHub: github.com/rladies-baltimore\nTwitter: RLadiesBmore\n\nPresentation slides and materials from meetup events can be found the global R-Ladies GitHub page.\nFor more information about R-Ladies Global, visit rladies.org."
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "R-Ladies Baltimore",
    "section": "",
    "text": "When attending R-Ladies Baltimore Events, use the Getting Started guide to help get you up and running and plugged into our local community"
  },
  {
    "objectID": "blog/making-holiday-cards-in-r-2018/index.html",
    "href": "blog/making-holiday-cards-in-r-2018/index.html",
    "title": "Making Holiday Cards in R 2018",
    "section": "",
    "text": "With the holiday season coming up, we want our first R-Ladies Baltimore coding project in R to be get into small groups and create holiday designs in R. Here are a few examples:\n\nHappy Holidays from Rafael Irizarry\n\nThe main part of the code looks like this:\n\nN &lt;- 120\npar(bg=\"black\")\nh &lt;- rep(c(2:4,7),N/3)\nh[sample(N,N/5)] &lt;- 0\nplot((-2)^as.complex(seq(1,49,len=100)^0.5),\n        pch=21,bg=h,xlab=\"\", ylab=\"\", xaxt=\"n\",yaxt=\"n\", cex=1.5)\ntext(-25,50,\"Happy Holidays!\",cex=2,col=ifelse(h%%2,\"white\",\"black\"))\n\n\n\n\n\nMake a Christmas Tree in R with random ornaments/presents\n\n\n# Make the canvas\nplot(1:10,1:10,xlim=c(-5,5),ylim=c(0,10),type=\"n\",xlab=\"\",ylab=\"\",xaxt=\"n\",yaxt=\"n\")\n# Make the branches\nrect(-1,0,1,2,col=\"tan3\",border=\"tan4\",lwd=3)\npolygon(c(-5,0,5),c(2,4,2),col=\"palegreen3\",border=\"palegreen4\",lwd=3)\npolygon(c(-4,0,4),c(3.5,5.5,3.5),col=\"palegreen4\",border=\"palegreen3\",lwd=3)\npolygon(c(-3,0,3),c(5,6.5,5),col=\"palegreen3\",border=\"palegreen4\",lwd=3)\npolygon(c(-2,0,2),c(6.25,7.5,6.25),col=\"palegreen4\",border=\"palegreen3\",lwd=3)\n\n#Add some ornaments\npoints(x=runif(4,-5,5),y=rep(2,4),col=sample(c(\"blue\",\"red\"),size=4,replace=T),cex=3,pch=19)\npoints(x=runif(4,-4,4),y=rep(3.5,4),col=sample(c(\"blue\",\"red\"),size=4,replace=T),cex=3,pch=19)\npoints(x=runif(4,-3,3),y=rep(5,4),col=sample(c(\"blue\",\"red\"),size=4,replace=T),cex=3,pch=19)\npoints(x=runif(4,-2,2),y=rep(6.25,4),col=sample(c(\"blue\",\"red\"),size=4,replace=T),cex=3,pch=19)\npoints(0,7.5,pch=8,cex=5,col=\"gold\",lwd=3)\n\n# Add some presents\nxPres = runif(10,-4.5,4.5)\nxWidth = runif(10,0.1,0.5)\nxHeight=runif(10,0,1)\nfor(i in 1:10){\n  rect(xPres[i]-xWidth[i],0,xPres[i]+xWidth[i],xHeight[i],col=sample(c(\"blue\",\"red\"),size=1))\n  rect(xPres[i]-0.2*xWidth[i],0,xPres[i]+0.2*xWidth[i],xHeight[i],col=sample(c(\"gold\",\"grey87\"),size=1))\n}\n\n\n\n\n\nGoal for the next hour\n\nIntroduce yourself to your neighbor and find a group of people that you want to work with\nOpen up R\nYour group can either work through the code that’s provided (great for beginners in R!) or if you want to challenge yourself, create your own holiday design! If you’re feeling really crazy, try making a shiny app. :D\n\nYou can then use the image as a holiday card design to send to your family and friends this holiday season. From 12:50-1pm we will start presentations and ask anyone who’s interested in discussing their design and talking through how they created it.\nSubmit code and images of holiday designs to the #meetup-events channel the R-Ladies Baltimore Slack."
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html",
    "title": "Introduction to tidyverse 2019",
    "section": "",
    "text": "Throughout this section we will be analyzing global health and economic data. We will be exploring one question:\n\nIs there a relationship between life expectancy and GDP per capita?\n\nWe will use the data that has been organized and delivered in the gapminder package available in an R package from Jenny Bryan.\nTo install the gapminder data set\n\nlibrary(devtools)\ninstall_github(\"jennybc/gapminder\")\n\n\n\n\nlibrary(gapminder)\n\n\n\nBy loading the gapminder package, we now have access to a data frame by the same name. Get an overview of this with str(), which displays the structure of an object.\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nstr() will provide a sensible description of almost anything and, worst case, nothing bad can actually happen. When in doubt, just str() some of the recently created objects to get some ideas a bout what to do next.\nWe could print the gapminder object itself to screen. However, if you’ve used R before, you might be reluctant to do this, because large datasets just fill up your console and provide very little insight.\nThis is the first big win for tibbles. The tidyverse offers a special case of R’s default data frame: the “tibble”, which is a nod to the actual class of these objects, tbl_df.\nNow we can boldly print gapminder to screen! It is a tibble (and also a regular data frame) and the tidyverse provides a nice print method that shows the most important stuff and doesn’t fill up your Console.\n\n## see? it's still a regular data frame, but also a tibble\nclass(gapminder)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nThis package provides a subset of the data provided by Gapminder. The data comes as a data frame (or tbl_df if you’re using dplyr). We can visit Gapminder.org documentation page to obtain information about the columns:\n\n\n\nvariable\nmeaning\n\n\n\n\ncountry\n\n\n\ncontinent\n\n\n\nyear\n\n\n\nlifeExp\nlife expectancy at birth\n\n\npop\ntotal population\n\n\ngdpPercap\nper-capita GDP\n\n\n\nIf you are dealing with plain vanilla data frames, you can rein in data frame printing explicitly with head() and tail(). Or turn it into a tibble with as_tibble()!\n\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\ntail(gapminder)\n\n# A tibble: 6 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1982    60.4  7636524      789.\n2 Zimbabwe Africa     1987    62.4  9216418      706.\n3 Zimbabwe Africa     1992    60.4 10704340      693.\n4 Zimbabwe Africa     1997    46.8 11404948      792.\n5 Zimbabwe Africa     2002    40.0 11926563      672.\n6 Zimbabwe Africa     2007    43.5 12311143      470.\n\n\nMore ways to query basic info on a data frame:\n\nnames(gapminder)\n\n[1] \"country\"   \"continent\" \"year\"      \"lifeExp\"   \"pop\"       \"gdpPercap\"\n\nncol(gapminder)\n\n[1] 6\n\nlength(gapminder)\n\n[1] 6\n\ndim(gapminder)\n\n[1] 1704    6\n\nnrow(gapminder)\n\n[1] 1704\n\n\nA statistical overview can be obtained with summary()\n\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n\nAlthough we haven’t begun our formal coverage of visualization yet, it’s so important for smell-testing dataset that we will make a few figures anyway. Here we use only base R graphics, which are very basic.\n\nplot(lifeExp ~ year, gapminder)\n\n\n\nplot(lifeExp ~ gdpPercap, gapminder)\n\n\n\nplot(lifeExp ~ log(gdpPercap), gapminder)"
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#loading-data-into-r",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#loading-data-into-r",
    "title": "Introduction to tidyverse 2019",
    "section": "",
    "text": "library(gapminder)\n\n\n\nBy loading the gapminder package, we now have access to a data frame by the same name. Get an overview of this with str(), which displays the structure of an object.\n\nstr(gapminder)\n\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\nstr() will provide a sensible description of almost anything and, worst case, nothing bad can actually happen. When in doubt, just str() some of the recently created objects to get some ideas a bout what to do next.\nWe could print the gapminder object itself to screen. However, if you’ve used R before, you might be reluctant to do this, because large datasets just fill up your console and provide very little insight.\nThis is the first big win for tibbles. The tidyverse offers a special case of R’s default data frame: the “tibble”, which is a nod to the actual class of these objects, tbl_df.\nNow we can boldly print gapminder to screen! It is a tibble (and also a regular data frame) and the tidyverse provides a nice print method that shows the most important stuff and doesn’t fill up your Console.\n\n## see? it's still a regular data frame, but also a tibble\nclass(gapminder)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nThis package provides a subset of the data provided by Gapminder. The data comes as a data frame (or tbl_df if you’re using dplyr). We can visit Gapminder.org documentation page to obtain information about the columns:\n\n\n\nvariable\nmeaning\n\n\n\n\ncountry\n\n\n\ncontinent\n\n\n\nyear\n\n\n\nlifeExp\nlife expectancy at birth\n\n\npop\ntotal population\n\n\ngdpPercap\nper-capita GDP\n\n\n\nIf you are dealing with plain vanilla data frames, you can rein in data frame printing explicitly with head() and tail(). Or turn it into a tibble with as_tibble()!\n\nhead(gapminder)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\ntail(gapminder)\n\n# A tibble: 6 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;    &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Zimbabwe Africa     1982    60.4  7636524      789.\n2 Zimbabwe Africa     1987    62.4  9216418      706.\n3 Zimbabwe Africa     1992    60.4 10704340      693.\n4 Zimbabwe Africa     1997    46.8 11404948      792.\n5 Zimbabwe Africa     2002    40.0 11926563      672.\n6 Zimbabwe Africa     2007    43.5 12311143      470.\n\n\nMore ways to query basic info on a data frame:\n\nnames(gapminder)\n\n[1] \"country\"   \"continent\" \"year\"      \"lifeExp\"   \"pop\"       \"gdpPercap\"\n\nncol(gapminder)\n\n[1] 6\n\nlength(gapminder)\n\n[1] 6\n\ndim(gapminder)\n\n[1] 1704    6\n\nnrow(gapminder)\n\n[1] 1704\n\n\nA statistical overview can be obtained with summary()\n\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n\nAlthough we haven’t begun our formal coverage of visualization yet, it’s so important for smell-testing dataset that we will make a few figures anyway. Here we use only base R graphics, which are very basic.\n\nplot(lifeExp ~ year, gapminder)\n\n\n\nplot(lifeExp ~ gdpPercap, gapminder)\n\n\n\nplot(lifeExp ~ log(gdpPercap), gapminder)"
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#what-is-this-common-philosphy",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#what-is-this-common-philosphy",
    "title": "Introduction to tidyverse 2019",
    "section": "What is this common philosphy?",
    "text": "What is this common philosphy?\nThe common philosphy is called “tidy” data. It is a standard way of mapping the meaning of a dataset to its structure.\nIn tidy data:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\n\n\n\n\nBelow, we are interested in transformating the table on the right to the the table on the left, which is considered “tidy”.\n\n\n\n\n\nWorking with tidy data is useful because it creates a structured way of organizing data values within a data set. This makes the data analysis process more efficient and simplifies the development of data analysis tools that work together. In this way, you can focus on the problem you are investigating, rather than the uninteresting logistics of data."
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#what-is-in-the-tidyverse",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#what-is-in-the-tidyverse",
    "title": "Introduction to tidyverse 2019",
    "section": "What is in the tidyverse?",
    "text": "What is in the tidyverse?\nWe can install and load the set of R packages using install.packages(\"tidyverse\") function.\nWhen we load the tidyverse package using library(tidyverse), there are six core R packages that load:\n\nreadr, for data import.\ntidyr, for data tidying.\ndplyr, for data wrangling.\nggplot2, for data visualisation.\npurrr, for functional programming.\ntibble, for tibbles, a modern re-imagining of data frames.\n\nHere, we load in the tidyverse.\n\nlibrary(tidyverse)\n\nBecause these packages all share the “tidy” philosphy, the data analysis workflow is easier as you move from package to package.\nToday we will focus on dplyr and ggplot2, for data wrangling and visualiation, but definitely check out the other packages such as readr, tidyr, R packages to import data, to transform data to the “tidy” format."
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#the-dplyr-r-package",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#the-dplyr-r-package",
    "title": "Introduction to tidyverse 2019",
    "section": "The dplyr R package",
    "text": "The dplyr R package\ndplyr is a powerful R-package to transform and summarize tabular data with rows and columns.\nThe package contains a set of functions (or “verbs”) to perform common data manipulation operations such as filtering for rows, selecting specific columns, re-ordering rows, adding new columns and summarizing data.\nIn addition, dplyr contains a useful function to perform another common task which is the is the “split-apply-combine” concept. We will discuss that in a little bit.\n\nHow does it compare to using base functions R?\nIf you are familiar with R, you are probably familiar with base R functions such as split(), subset(), apply(), sapply(), lapply(), tapply() and aggregate(). Compared to base functions in R, the functions in dplyr are easier to work with, are more consistent in the syntax and are targeted for data analysis around data frames instead of just vectors.\nThe important dplyr verbs to remember are:\n\n\n\n\n\n\n\ndplyr verbs\nDescription\n\n\n\n\nselect()\nselect columns\n\n\nfilter()\nfilter rows\n\n\narrange()\nre-order or arrange rows\n\n\nmutate()\ncreate new columns\n\n\nsummarize()\nsummarize values\n\n\ngroup_by()\nallows for group operations in the “split-apply-combine” concept\n\n\n\n\n\nPipe operator: %&gt;%\nBefore we go any futher, let’s introduce the pipe operator: %&gt;%. In our stocks example, we briefly saw this symbol. It is called the pipe operator. dplyr imports this operator from another package (magrittr) see help file here. This operator allows you to pipe the output from one function to the input of another function. Instead of nesting functions (reading from the inside to the outside), the idea of of piping is to read the functions from left to right.\n\n\ndplyr verbs in action\nThe two most basic functions are select() and filter() which selects columns and filters rows, respectively.\n\nSelecting columns using select()\nTo select all the columns except a specific column, use the “-” (subtraction) operator (also known as negative indexing).\n\ngapminder %&gt;% \n    select(-lifeExp)\n\n# A tibble: 1,704 × 5\n   country     continent  year      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952  8425333      779.\n 2 Afghanistan Asia       1957  9240934      821.\n 3 Afghanistan Asia       1962 10267083      853.\n 4 Afghanistan Asia       1967 11537966      836.\n 5 Afghanistan Asia       1972 13079460      740.\n 6 Afghanistan Asia       1977 14880372      786.\n 7 Afghanistan Asia       1982 12881816      978.\n 8 Afghanistan Asia       1987 13867957      852.\n 9 Afghanistan Asia       1992 16317921      649.\n10 Afghanistan Asia       1997 22227415      635.\n# ℹ 1,694 more rows\n\n\nThe function select() is much more powerful though. To select a range of columns by name, use the “:” (colon) operator\n\ngapminder %&gt;% \n  select(lifeExp:gdpPercap)\n\n# A tibble: 1,704 × 3\n   lifeExp      pop gdpPercap\n     &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1    28.8  8425333      779.\n 2    30.3  9240934      821.\n 3    32.0 10267083      853.\n 4    34.0 11537966      836.\n 5    36.1 13079460      740.\n 6    38.4 14880372      786.\n 7    39.9 12881816      978.\n 8    40.8 13867957      852.\n 9    41.7 16317921      649.\n10    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nTo select all columns that start with the character string “c”, use the function starts_with()\n\ngapminder %&gt;% \n  select(starts_with(\"c\"))\n\n# A tibble: 1,704 × 2\n   country     continent\n   &lt;fct&gt;       &lt;fct&gt;    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# ℹ 1,694 more rows\n\n\nSome additional options to select columns based on a specific criteria include\n\nends_with() = Select columns that end with a character string\ncontains() = Select columns that contain a character string\nmatches() = Select columns that match a regular expression\none_of() = Select columns names that are from a group of names\n\n\n\nSelecting rows using filter()\nLet’s say we only want the data from 2007.\nTo do this, we can use the filter() function to filter the rows for years in 2007.\n\ngapminder %&gt;% \n  filter(year == \"2007\")\n\n# A tibble: 142 × 6\n   country     continent  year lifeExp       pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       2007    43.8  31889923      975.\n 2 Albania     Europe     2007    76.4   3600523     5937.\n 3 Algeria     Africa     2007    72.3  33333216     6223.\n 4 Angola      Africa     2007    42.7  12420476     4797.\n 5 Argentina   Americas   2007    75.3  40301927    12779.\n 6 Australia   Oceania    2007    81.2  20434176    34435.\n 7 Austria     Europe     2007    79.8   8199783    36126.\n 8 Bahrain     Asia       2007    75.6    708573    29796.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391.\n10 Belgium     Europe     2007    79.4  10392226    33693.\n# ℹ 132 more rows\n\n\nNote: you can use the boolean operators (e.g. &gt;, &lt;, &gt;=, &lt;=, !=, %in%) to create logical tests.\nFor example, if we wanted only years after 2014, we can add a second criteria:\n\ngapminder %&gt;% \n  filter(year &gt; 1977)\n\n# A tibble: 852 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1982    39.9 12881816      978.\n 2 Afghanistan Asia       1987    40.8 13867957      852.\n 3 Afghanistan Asia       1992    41.7 16317921      649.\n 4 Afghanistan Asia       1997    41.8 22227415      635.\n 5 Afghanistan Asia       2002    42.1 25268405      727.\n 6 Afghanistan Asia       2007    43.8 31889923      975.\n 7 Albania     Europe     1982    70.4  2780097     3631.\n 8 Albania     Europe     1987    72    3075321     3739.\n 9 Albania     Europe     1992    71.6  3326498     2497.\n10 Albania     Europe     1997    73.0  3428038     3193.\n# ℹ 842 more rows\n\n\n\n\nUse mutate() to add new variables\nmutate() is a function that defines and inserts new variables into a tibble. You can refer to existing variables by name.\n\ngapminder %&gt;%\n    filter(year==2007) %&gt;% \n    select(-continent) %&gt;%\n    mutate(gdp = pop * gdpPercap)\n\n# A tibble: 142 × 6\n   country      year lifeExp       pop gdpPercap           gdp\n   &lt;fct&gt;       &lt;int&gt;   &lt;dbl&gt;     &lt;int&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n 1 Afghanistan  2007    43.8  31889923      975.  31079291949.\n 2 Albania      2007    76.4   3600523     5937.  21376411360.\n 3 Algeria      2007    72.3  33333216     6223. 207444851958.\n 4 Angola       2007    42.7  12420476     4797.  59583895818.\n 5 Argentina    2007    75.3  40301927    12779. 515033625357.\n 6 Australia    2007    81.2  20434176    34435. 703658358894.\n 7 Austria      2007    79.8   8199783    36126. 296229400691.\n 8 Bahrain      2007    75.6    708573    29796.  21112675360.\n 9 Bangladesh   2007    64.1 150448339     1391. 209311822134.\n10 Belgium      2007    79.4  10392226    33693. 350141166520.\n# ℹ 132 more rows\n\n\n\n\nArrange or re-order rows using arrange()\nTo arrange (or re-order) rows by a particular column such as the population, list the name of the column you want to arrange the rows by\n\ngapminder %&gt;%     \n    filter(year==2007) %&gt;%\n    select(-continent) %&gt;%\n    mutate(gdp = pop * gdpPercap) %&gt;% \n    arrange(gdp)\n\n# A tibble: 142 × 6\n   country                   year lifeExp     pop gdpPercap         gdp\n   &lt;fct&gt;                    &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1 Sao Tome and Principe     2007    65.5  199579     1598.  319014077.\n 2 Comoros                   2007    65.2  710960      986.  701111696.\n 3 Guinea-Bissau             2007    46.4 1472041      579.  852652874.\n 4 Djibouti                  2007    54.8  496374     2082. 1033689705.\n 5 Gambia                    2007    59.4 1688359      753. 1270911775.\n 6 Liberia                   2007    45.7 3193942      415. 1323912407.\n 7 Central African Republic  2007    44.7 4369038      706. 3084613079.\n 8 Eritrea                   2007    58.0 4906585      641. 3146934084.\n 9 Lesotho                   2007    42.6 2012649     1569. 3158513357.\n10 Burundi                   2007    49.6 8390505      430. 3608510288.\n# ℹ 132 more rows\n\n\nSo if we wanted to figure out what were the top three countries with the largest gdpPercap in 2007, we could use the desc() function inside of arrange() to order rows in a descending order.\n\ngapminder %&gt;% \n  filter(year == 2007) %&gt;% \n  arrange(desc(gdpPercap)) %&gt;% \n  head(n=3)\n\n# A tibble: 3 × 6\n  country   continent  year lifeExp     pop gdpPercap\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;     &lt;dbl&gt;\n1 Norway    Europe     2007    80.2 4627926    49357.\n2 Kuwait    Asia       2007    77.6 2505559    47307.\n3 Singapore Asia       2007    80.0 4553009    47143."
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#ggplot2",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#ggplot2",
    "title": "Introduction to tidyverse 2019",
    "section": "ggplot2",
    "text": "ggplot2\nggplot2 is a powerful data exploration and visualization package that can create graphics in R. It was created by Hadley Wickham when he was a graduate student at Iowa State University and is based on the principals defined in the Grammar of Graphics.\n\nWhy is it useful?\nThe idea of the Grammar of Graphics is to break the graph into components and handle the components of a graph separately. The ggplot2 package contains a set of functions that allow us to build the features of the graph in a series of layers for versatility and control.\nThere are two main plotting functions in ggplot2:\n\nqplot() = a quick plot, similar to the plot() function in base R\nggplot() = a “grammar of graphics” (gg) plot which is made up two components (a ggplot() object and at least one geom layer)\n\nThe ggplot2 is loaded whenever you load tidyverse, but you can always load it formally.\n\nlibrary(ggplot2)"
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#life-expectancy-and-gdp-per-capita",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#life-expectancy-and-gdp-per-capita",
    "title": "Introduction to tidyverse 2019",
    "section": "Life expectancy and GDP per capita",
    "text": "Life expectancy and GDP per capita\nTo try and answer our first question we will make a scatterplot. We will do this for the latest entry in our database which is:\n\nmax( gapminder$year )\n\n[1] 2007\n\n\nWe will first make a quick plot of these two variables.\n\nqplot\nThe qplot function allows us to produce simple plots, similar to plot in base R. The main input of qplot is an x and y argument, but it also accepts a data set (data) where the x and y variables are located.\nTo create a scatter-plot of life expectancy versus GDP per capita for 2007, we start by creating a subset of the data with only the 2007 year.\n\ndat &lt;- filter(gapminder, year==2007)\n\nWhy does this not work?\n\nqplot(x = gdpPercap, y = lifeExp) \n\nWe need to specify where to get these values from. Instead, we can use the vectors of dat directly\n\n## need to specify where variables are located\nqplot(x = dat$gdpPercap, y = dat$lifeExp) \n\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n\n\n\n\n\nHowever, a cleaner way to do this does not define dat and instead uses the data argument:\n\n## instead of having to specify name of data frame each time, just list it once\nqplot(x = gdpPercap, y = lifeExp, data = filter(gapminder, year==2007))\n\n\n\n\nIf youw ant to add labels to the x and y axis, you can use the xlab and ylab arguments. You can read the help file to check out other arguments available in the function.\n\nqplot(x = gdpPercap, y = lifeExp, \n      data = filter(gapminder, year==2007), \n      xlab = \"GDP per Capita\", \n      ylab = \"Life Expectancy\", \n      main = \"Data from Gapminder\")\n\n\n\n\nFrom this plot, we see that there is a wide variability in life expectancy for the lower income countries and then somewhat of a positive trend. However, there are many countries with incomes below 5,000 dollars per person and it is hard to see differences between these. Next we will now learn about the grammar of graphics and create a series of visualizations."
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#ggplot",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#ggplot",
    "title": "Introduction to tidyverse 2019",
    "section": "ggplot",
    "text": "ggplot\nThis function is the implementation of the “Grammar of Graphics” that allows us to build layers of graphical elements to produce plots. As explained by Hadley Wickham\n\nthe grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinates system.\n\n\nTerminology\n\nggplot - the main function where you specify the data set and variables to plot (this is where we define the x and y variable names)\ngeoms - geometric objects\n\ne.g. geom_point(), geom_bar(), geom_line(), geom_histogram()\n\naes - aesthetics\n\nshape, transparency, color, fill, linetype\n\nscales - define how your data will be plotted\n\ncontinuous, discrete, log, etc\n\n\nThere are three ways to initialize a ggplot() object.\nAn empty ggplot object\n\nggplot()         \n\n\n\n\nA ggplot object associated with a dataset\n\ngapminder %&gt;% \n    filter(year==2007) %&gt;% \n    ggplot()\n\n\n\n\nor a ggplot object with a dataset and x and y defined\n\ngapminder %&gt;% \n    filter(year==2007) %&gt;% \n    ggplot(aes(x=gdpPercap, y = lifeExp))\n\n\n\n\n\n\nCreating your first ggplot()\nWe just used the function aes() which is an aesthetic mapping function inside the ggplot() object. We use this function to specify plot attributes (e.g. x and y variable names) that will not change as we add more layers.\nAnything that goes in the ggplot() object becomes a global setting. From there, we use the geom objects to add more layers to the base ggplot() object. These will define what we are interested in illustrating using the data.\nEarlier we noticed that there are many countries with incomes below 5,000 dollars per person and it is hard to see differences between these. We can examine just this variable with a histogram. Here we would use a different geometry:\n\ngapminder %&gt;% \n    filter(year==2007) %&gt;% \n    ggplot(aes(x=gdpPercap)) + geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nThe histogram shows very large tails. We may do better by transforming the data. For data like this, the log transformation seems to work well. It also has a nice economic interpretation related to percent growth: in \\(log_{10}\\) a change of 1 means the country is 10 times richer.\nSo how do we make the x-axis in the log scale? It is convenient to have this cheat sheet around when using ggplot2. From there we see that scale_x_log10 does what we want.\n\ngapminder %&gt;% \n    filter(year==2007) %&gt;% \n    ggplot(aes(x=gdpPercap)) + \n    geom_histogram(bins=25) + \n    scale_x_log10()\n\n\n\n\nWe no longer see extreme tails. The scatter plot now looks much more informative:\nNow we can remake the scatter plot but now make sure the x-axis is in a log-scale\n\ngapminder %&gt;% \n    filter(year==2007) %&gt;% \n    ggplot(aes(x=gdpPercap, y = lifeExp)) +\n    geom_point() + scale_x_log10()\n\n\n\n\nWe can also do this:\n\ngapminder %&gt;% \n    filter(year==2007) %&gt;% \n    ggplot(aes(x=log10(gdpPercap), y = lifeExp)) +\n    geom_point()\n\n\n\n\nWe can also use other really great packages, such as ggrepel:\n\nlibrary(ggrepel)\ngapminder %&gt;% \n    filter(year==2007) %&gt;% \n    ggplot(aes(x=gdpPercap, y = lifeExp)) +\n    geom_point(color = 'red',) + scale_x_log10() + \n    geom_text_repel(aes(label = country), size = 2) +\n  theme_classic() \n\nWarning: ggrepel: 53 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\nNow you are ready to make presentation quality data visualizations!"
  },
  {
    "objectID": "blog/2019-03-introduction-to-tidyverse/index.html#confessions-and-countermeasures-with-the-tidyverse",
    "href": "blog/2019-03-introduction-to-tidyverse/index.html#confessions-and-countermeasures-with-the-tidyverse",
    "title": "Introduction to tidyverse 2019",
    "section": "Confessions and countermeasures with the tidyverse",
    "text": "Confessions and countermeasures with the tidyverse\nHere are the awesome slides from Rachael Workman (PhD student in Biochemistry, Cellular and Molecular Biology (BCMB) program) where she discusses\nConfessions and Countermeasures: my not ideal R habits and how the Tidyverse resolved them"
  },
  {
    "objectID": "blog/introduction-to-r-package-development-2019/index.html",
    "href": "blog/introduction-to-r-package-development-2019/index.html",
    "title": "Introduction to R Package Development 2019",
    "section": "",
    "text": "In this tutorial, you are going to create your own package using the usethis workflow R package. For our purposes, we are using the code provide on the usethis website and the blog from Emil Hvitfeldt.\nThis package is great because it automates repetitive tasks that arise during project setup and development, both for R packages and non-package projects.\n\n\n\n\nInstall the released version of usethis from CRAN:\n\ninstall.packages(\"usethis\")\n\nOr install the development version from GitHub with:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"r-lib/usethis\")\n\nYou may also need these packages:\n\ninstall.packages(\"testthat\")\ninstall.packages(\"spelling\")"
  },
  {
    "objectID": "blog/introduction-to-r-package-development-2019/index.html#getting-started-with-the-usethis-package",
    "href": "blog/introduction-to-r-package-development-2019/index.html#getting-started-with-the-usethis-package",
    "title": "Introduction to R Package Development 2019",
    "section": "",
    "text": "Install the released version of usethis from CRAN:\n\ninstall.packages(\"usethis\")\n\nOr install the development version from GitHub with:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"r-lib/usethis\")\n\nYou may also need these packages:\n\ninstall.packages(\"testthat\")\ninstall.packages(\"spelling\")"
  },
  {
    "objectID": "blog/introduction-to-r-package-development-2019/index.html#create-the-package",
    "href": "blog/introduction-to-r-package-development-2019/index.html#create-the-package",
    "title": "Introduction to R Package Development 2019",
    "section": "Create the package",
    "text": "Create the package\n\ncreate_package(path)\n\n✔ Creating '/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/'\n✔ Setting active project to '/private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg'\n✔ Creating 'R/'\n✔ Writing 'DESCRIPTION'\n\n\nPackage: mypkg\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last &lt;first.last@example.com&gt; [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n\n\n✔ Writing 'NAMESPACE'\n✔ Setting active project to '&lt;no active project&gt;'\n\n\nIf you are inside of RStudio, this will (hopefully) open up a new RStudio session. Also, usethis is quite chatty, explaining what it’s doing and assigning you tasks. For example,\n✔ indicates something usethis has done for you.\n● indicates that you’ll need to do some work yourself.\nFor this tutorial, we are not in an interactive session. So we use the proj_activate(path) function with the path argument to change the working directory to the temporary path that we’ve created.\nNOTE: You only need to run proj_activate(path) if you are not in an interactive session.\n\nproj_activate(path)\n\n✔ Setting active project to '/private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg'\n✔ Changing working directory to '/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/'"
  },
  {
    "objectID": "blog/introduction-to-r-package-development-2019/index.html#setting-up-gitgithub",
    "href": "blog/introduction-to-r-package-development-2019/index.html#setting-up-gitgithub",
    "title": "Introduction to R Package Development 2019",
    "section": "Setting up git/github",
    "text": "Setting up git/github\nWe won’t do it here, but you can use the functions below to help set link the pakckage to GitHub. If you want to explore this, check out Jenny Bryan tutorial on getting setup.\n\nuse_git()\nuse_github()"
  },
  {
    "objectID": "blog/introduction-to-r-package-development-2019/index.html#one-time-modifications",
    "href": "blog/introduction-to-r-package-development-2019/index.html#one-time-modifications",
    "title": "Introduction to R Package Development 2019",
    "section": "One time modifications",
    "text": "One time modifications\nNow that we are up and running there is a bunch of things we should do before we start writing code. Firstly we will go over all the actions that only have to be done once and get those out of the way.\n\nSetting up your license\nThere are several types of licenses you can pick from, for example\n\nuse_mit_license()\nuse_gpl3_license()\nuse_apl2_license()\nuse_cc0_license()\n\nLet’s select the MIT license\n\nuse_mit_license(\"Margaret Taub\")\n\n✔ Adding 'MIT + file LICENSE' to License\n✔ Writing 'LICENSE'\n✔ Writing 'LICENSE.md'\n✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\n\n\nThe choice of license is beyond the scope of the tutorial, but we refer readers here to learn more about types of licenses.\n\n\nAdd README.md files\nNow we add the readme files, this is done using the use_news_md() function. This will create a readme.md file that you can edit and knit as you normally would.\n\nuse_news_md()\n\n✔ Writing 'NEWS.md'\n\n\n\n\nAdding continuous integration (optional)\nNext we will setup some continuous integration. This is completely optional, but it’s recommended. A nice intro to this topic is from Julia Silge.\nFor a quick summary, we will extract a section from her blog post:\n\n“If you have written an R package, you probably have gotten into the habit of running R CMD check on a (hopefully) regular basis to check for common problems. It automatically detects lots of problems that can arise that you might not otherwise notice. Also you probably have put your package on GitHub, for version control and also to be able to share your code with other people and track issues and whatnot. The idea behind continuous integration is that CI will automatically run R CMD check (along with your tests, etc.) every time you push a commit to GitHub. You don’t have to remember to do this; CI automatically checks the code after every commit. Travis-CI is a continuous integration service that builds and tests projects that are hosted on GitHub; if your R package is open source (i.e., not private), then using Travis-CI is free.”\n\nTo set up CI, use the following usethis functions:\n\nuse_travis()\nuse_appveyor()\nuse_coverage(type = c(\"codecov\"))\n\nAgain, this is outside the scope of this tutorial, but we leave it here for you to explore.\n\n\nAdd unit testing\nYou will most likely also want to include unit testing, this can be achieved using the testthat package. To do this, use the use_testthat() function.\n\nuse_testthat()\n\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Adding '3' to Config/testthat/edition\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\n\nuse_test(\"my-test\")\n\n✔ Writing 'tests/testthat/test-my-test.R'\n• Edit 'tests/testthat/test-my-test.R'\n\n\n\n\nAdd spell check\nNext we will add spell checking to our workflow, this is done with\n\n# install.packages(\"spelling\")\nuse_spell_check()\n\n✔ Adding 'spelling' to Suggests field in DESCRIPTION\n✔ Adding 'en-US' to Language\n\n\nNo changes required to /private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/inst/WORDLIST\nUpdated /private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/tests/spelling.R\n\n\n• Run `devtools::check()` to trigger spell check\n\n\nMake sure that the spelling package is installed before running.\n\n\nCreate data folder and objects\nIf you are going to include data in your package, you would want to include a data-raw folder where the data is created/formatted.\n\nuse_data_raw()\n\n✔ Creating 'data-raw/'\n✔ Adding '^data-raw$' to '.Rbuildignore'\n✔ Writing 'data-raw/DATASET.R'\n• Finish the data preparation script in 'data-raw/DATASET.R'\n• Use `usethis::use_data()` to add prepared data to package\n\nx &lt;- 1\ny &lt;- 2\nuse_data(x, y)\n\n✔ Adding 'R' to Depends field in DESCRIPTION\n✔ Creating 'data/'\n✔ Setting LazyData to 'true' in 'DESCRIPTION'\n✔ Saving 'x', 'y' to 'data/x.rda', 'data/y.rda'\n• Document your data (see 'https://r-pkgs.org/data.html')\n\n\n\n\nAdd NEWS file\nLastly if you plan on doing a little larger project a NEWS file is very handy to keep track on what is happening in your package.\n\nuse_news_md()\n\n\n\nAdd packages to DESCRIPTION file\nYou can also add packages to the DESCRIPTION file\nFor example, here we are adding the MASS package to the Suggests description field.\n\nuse_package(\"MASS\", \"Suggests\")\n\n✔ Adding 'MASS' to Suggests field in DESCRIPTION\n• Use `requireNamespace(\"MASS\", quietly = TRUE)` to test if package is installed\n• Then directly refer to functions with `MASS::fun()`\n\nuse_package(\"dplyr\")\n\n✔ Adding 'dplyr' to Imports field in DESCRIPTION\n• Refer to functions with `dplyr::fun()`\n\n\n\n\nSet up documentation files\nWe can set up the documention files using Roxygen\n\nuse_roxygen_md()"
  },
  {
    "objectID": "blog/introduction-to-r-package-development-2019/index.html#multiple-time-modifications",
    "href": "blog/introduction-to-r-package-development-2019/index.html#multiple-time-modifications",
    "title": "Introduction to R Package Development 2019",
    "section": "Multiple time modifications",
    "text": "Multiple time modifications\nNow that we have setup all the basics, the general development can begin.\nYou typical workflow will be repeating the following steps in the order that suits your flow\n\nWrite some code\nRestart R Session Cmd+Shift+F10 (Ctrl+Shift+F10 for Windows)\nBuild and Reload Cmd+Shift+B (Ctrl+Shift+B for Windows)\nTest Package Cmd+Shift+T (Ctrl+Shift+T for Windows)\nCheck Package Cmd+Shift+E (Ctrl+Shift+E for Windows)\nDocument Package Cmd+Shift+D (Ctrl+Shift+D for Windows)\n\n\nCreate .R files and unit tests for functions\n\nuse_r(\"function_name\")\n\n• Edit 'R/function_name.R'\n\n\nThis function is very important and you will using it a lot, not only will it create the files you save your functions in, but it will also open the files if they are already created, this makes navigating your R files much easier. Once you have created your function it is time to add some tests! This is done using the use_test() function, and it works much the same way as the use_r().\n\nuse_test(\"function_name\")\n\n✔ Writing 'tests/testthat/test-function_name.R'\n• Edit 'tests/testthat/test-function_name.R'\n\n\n\n\nCreate a vignette\nAn vignette provides a nice piece of documentation once you have added a bunch of capabilities to your package.\n\nuse_vignette(\"my_cool_vignette\")\n\n✔ Adding 'knitr' to Suggests field in DESCRIPTION\n✔ Adding 'rmarkdown' to Suggests field in DESCRIPTION\n✔ Adding 'knitr' to VignetteBuilder\n✔ Adding 'inst/doc' to '.gitignore'\n✔ Creating 'vignettes/'\n✔ Adding '*.html', '*.R' to 'vignettes/.gitignore'\n✔ Writing 'vignettes/my_cool_vignette.Rmd'\n• Edit 'vignettes/my_cool_vignette.Rmd'"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Introduction to R Package Development 2019\n\n\n\n\n\n\n\nblog\n\n\nr-package\n\n\n\n\n\n\n\n\n\n\n\nMay 20, 2019\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to tidyverse 2019\n\n\n\n\n\n\n\nblog\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\nMar 13, 2019\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\nMaking Holiday Cards in R 2018\n\n\n\n\n\n\n\nblog\n\n\nholiday\n\n\ndata-viz\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2018\n\n\nStephanie Hicks\n\n\n\n\n\n\nNo matching items"
  }
]