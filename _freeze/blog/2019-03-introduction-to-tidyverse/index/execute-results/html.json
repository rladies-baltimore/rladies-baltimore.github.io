{
  "hash": "9c068c0eb5a15d587556283218c85991",
  "result": {
    "markdown": "---\ntitle: \"Introduction to tidyverse 2019\"\nauthor: \"Stephanie Hicks\"\ndate: \"2019-03-13\"\ncategories: [blog, tidyverse]\nformat:\n    html:\n        toc: true\n        toc-depth: 3\n---\n\n\n\n# Motivation: Global Health and Economic Data\n\nThroughout this section we will be analyzing global health and \neconomic data. We will be exploring one question: \n\n1. Is there a relationship between life expectancy and GDP per capita?\n\nWe will use the data that has been organized and delivered in the \n`gapminder` package available in an \n[R package from Jenny Bryan](https://github.com/jennybc/gapminder).  \n\nTo install the `gapminder` data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\ninstall_github(\"jennybc/gapminder\")\n```\n:::\n\n\n## Loading data into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\n```\n:::\n\n\n### Meet the `gapminder` data frame or \"tibble\"\n\nBy loading the `gapminder` package, we now have access to a \ndata frame by the same name. Get an overview of this with \n`str()`, which displays the structure of an object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [1,704 × 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n```\n:::\n:::\n\n\n`str()` will provide a sensible description of almost anything and,\nworst case, nothing bad can actually happen. When in doubt, just \n`str()` some of the recently created objects to get some ideas a\nbout what to do next.\n\nWe could print the `gapminder` object itself to screen. However, \nif you've used R before, you might be reluctant to do this, because\nlarge datasets just fill up your console and provide very little insight.\n\nThis is the first big win for **tibbles**. The \n[`tidyverse`](https://github.com/hadley/tidyverse) offers a special \ncase of R's default data frame: the \"tibble\", which is a nod to the \nactual class of these objects, `tbl_df`.\n\nNow we can boldly print `gapminder` to screen! It is a \ntibble (and also a regular data frame) and the `tidyverse`\nprovides a nice print method that shows the most important \nstuff and doesn't fill up your Console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## see? it's still a regular data frame, but also a tibble\nclass(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\ngapminder\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nThis package provides a subset of the data provided by \n[Gapminder](http://www.gapminder.org/data/). The data comes as a \ndata frame (or `tbl_df` if you're using `dplyr`). We can visit \n[Gapminder.org documentation page](http://www.gapminder.org/data/documentation/) \nto obtain information about the columns:\n\n| variable  | meaning                  |\n|:----------|:-------------------------|\n| country   |                          |\n| continent |                          |\n| year      |                          |\n| lifeExp   | life expectancy at birth |\n| pop       | total population         |\n| gdpPercap | per-capita GDP           |\n\n\nIf you are dealing with plain vanilla data frames, you can rein in data frame printing explicitly with `head()` and `tail()`. Or turn it into a tibble with `as_tibble()`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n```\n:::\n\n```{.r .cell-code}\ntail(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  country  continent  year lifeExp      pop gdpPercap\n  <fct>    <fct>     <int>   <dbl>    <int>     <dbl>\n1 Zimbabwe Africa     1982    60.4  7636524      789.\n2 Zimbabwe Africa     1987    62.4  9216418      706.\n3 Zimbabwe Africa     1992    60.4 10704340      693.\n4 Zimbabwe Africa     1997    46.8 11404948      792.\n5 Zimbabwe Africa     2002    40.0 11926563      672.\n6 Zimbabwe Africa     2007    43.5 12311143      470.\n```\n:::\n:::\n\n\nMore ways to query basic info on a data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country\"   \"continent\" \"year\"      \"lifeExp\"   \"pop\"       \"gdpPercap\"\n```\n:::\n\n```{.r .cell-code}\nncol(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nlength(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\ndim(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1704    6\n```\n:::\n\n```{.r .cell-code}\nnrow(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1704\n```\n:::\n:::\n\n\nA statistical overview can be obtained with `summary()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n```\n:::\n:::\n\n\nAlthough we haven't begun our formal coverage of \nvisualization yet, it's so important for smell-testing \ndataset that we will make a few figures anyway. \nHere we use only base R graphics, which are very basic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(lifeExp ~ year, gapminder)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first-plots-base-R-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(lifeExp ~ gdpPercap, gapminder)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first-plots-base-R-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(lifeExp ~ log(gdpPercap), gapminder)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first-plots-base-R-3.png){width=672}\n:::\n:::\n\n\n\n\n# Welcome to the \"Tidyverse\"\n\nThe [tidyverse](https://www.tidyverse.org) is _\"an opinionated \ncollection of R packages designed for data science. All packages \nshare an underlying philosophy and common APIs.\"_ \n\nAnother way of putting it is that it's a set of packages \nthat are useful specifically for data manipulation, \nexploration and visualization with a common philosphy. \n\n## What is this common philosphy? \n\nThe common philosphy is called _\"tidy\"_ data. It is \na standard way of mapping the meaning of a dataset\nto its structure.\n\nIn _tidy_ data:\n\n* Each variable forms a column.\n* Each observation forms a row.\n* Each type of observational unit forms a table.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](http://r4ds.had.co.nz/images/tidy-1.png){width=95%}\n:::\n:::\n\n\nBelow, we are interested in transformating the table on \nthe right to the the table on the left, which is \nconsidered \"tidy\". \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](http://r4ds.had.co.nz/images/tidy-9.png){width=95%}\n:::\n:::\n\n\nWorking with tidy data is useful because it creates a structured way of\norganizing data values within a data set. This makes the data analysis \nprocess more efficient and simplifies the development of data analysis tools\nthat work together. In this way, you can focus on the problem you are\ninvestigating, rather than the uninteresting logistics of data.  \n\n## What is in the `tidyverse`? \n\nWe can install and load the set of R packages using \n`install.packages(\"tidyverse\")` function. \n\nWhen we load the tidyverse package using `library(tidyverse)`, \nthere are six core R packages that load:\n\n* [readr](http://readr.tidyverse.org), for data import.\n* [tidyr](http://tidyr.tidyverse.org), for data tidying.\n* [dplyr](http://dplyr.tidyverse.org), for data wrangling.\n* [ggplot2](http://ggplot2.tidyverse.org), for data visualisation.\n* [purrr](http://purrr.tidyverse.org), for functional programming.\n* [tibble](http://tibble.tidyverse.org), for tibbles, a modern re-imagining of data frames.\n\nHere, we load in the tidyverse. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nBecause these packages all share the \"tidy\" philosphy, \nthe data analysis workflow is easier as you move from \npackage to package. \n\nToday we will focus on `dplyr` and `ggplot2`, for \ndata wrangling and visualiation, but definitely check \nout the other packages such as `readr`,\n`tidyr`, R packages to import data, \nto transform data to the \"tidy\" format. \n\n\n# Data wrangling \n\nIn the real world, analyzing data rarely involves \ndata that can be easily imported and ready for \nanalysis. According to Wikipedia:\n\n> Data munging or data wrangling is loosely the process \nof manually converting or mapping data from one \"raw\" \nform into another format that allows for more convenient \nconsumption of the data with the help of semi-automated \ntools.\n\nAs you will see in class, one of the most \ntime-consuming aspects of the data analysis \nprocess is \"data wrangling\". This is also \nis a trendy term for \n_cleaning up a messy data set_. \n\nR provides incredibly powerful and flexible language \nfor data wrangling. However, the syntax is somewhat \nhard to get used to. We will therefore introducing \na package that makes the syntax much more like \nthe English language. This package is `dplyr`. \n\n## The `dplyr` R package\n\n[`dplyr`](http://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html) \nis a powerful R-package to transform and summarize \ntabular data with rows and columns. \n\nThe package contains a set of functions \n(or \"verbs\") to perform common data manipulation\noperations such as filtering for rows, selecting \nspecific columns, re-ordering rows, adding new \ncolumns and summarizing data. \n\nIn addition, `dplyr` contains a useful function to\nperform another common task which is the is the \n\"split-apply-combine\" concept.  We will discuss \nthat in a little bit. \n\n### How does it compare to using base functions R?\n\nIf you are familiar with R, you are probably familiar \nwith base R functions such as `split()`, `subset()`, \n`apply()`, `sapply()`, `lapply()`, `tapply()` and \n`aggregate()`. Compared to base functions in R, the \nfunctions in `dplyr` are easier to work with, are \nmore consistent in the syntax and are targeted for \ndata analysis around data frames instead of just vectors. \n\nThe important `dplyr` verbs to remember are: \n\n`dplyr` verbs | Description\n--- | ---\n`select()` | select columns \n`filter()` | filter rows\n`arrange()` | re-order or arrange rows\n`mutate()` | create new columns\n`summarize()` | summarize values\n`group_by()` | allows for group operations in the \"split-apply-combine\" concept\n\n\n\n### Pipe operator: %>%\n\nBefore we go any futher, let's introduce the \npipe operator: `%>%`. In our `stocks` example,\nwe briefly saw this symbol. It is called the\npipe operator. `dplyr` imports\nthis operator from another package \n(`magrittr`)\n[see help file here](http://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html). \nThis operator allows you to pipe the output \nfrom one function to the input of another\nfunction. Instead of nesting functions \n(reading from the inside to the \noutside), the idea of of piping is to \nread the functions from left to right. \n\n### `dplyr` verbs in action\n\nThe two most basic functions are `select()` and \n`filter()` which selects columns and filters \nrows, respectively. \n\n#### Selecting columns using `select()`\n\nTo select all the columns *except* a \nspecific column, use the \"-\" (subtraction) operator \n(also known as negative indexing). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n    select(-lifeExp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 5\n   country     continent  year      pop gdpPercap\n   <fct>       <fct>     <int>    <int>     <dbl>\n 1 Afghanistan Asia       1952  8425333      779.\n 2 Afghanistan Asia       1957  9240934      821.\n 3 Afghanistan Asia       1962 10267083      853.\n 4 Afghanistan Asia       1967 11537966      836.\n 5 Afghanistan Asia       1972 13079460      740.\n 6 Afghanistan Asia       1977 14880372      786.\n 7 Afghanistan Asia       1982 12881816      978.\n 8 Afghanistan Asia       1987 13867957      852.\n 9 Afghanistan Asia       1992 16317921      649.\n10 Afghanistan Asia       1997 22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nThe function `select()` is much more \npowerful though. To select a range \nof columns by name, use the \":\" (colon) operator\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  select(lifeExp:gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 3\n   lifeExp      pop gdpPercap\n     <dbl>    <int>     <dbl>\n 1    28.8  8425333      779.\n 2    30.3  9240934      821.\n 3    32.0 10267083      853.\n 4    34.0 11537966      836.\n 5    36.1 13079460      740.\n 6    38.4 14880372      786.\n 7    39.9 12881816      978.\n 8    40.8 13867957      852.\n 9    41.7 16317921      649.\n10    41.8 22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nTo select all columns that start with the \ncharacter string \"c\", use the function `starts_with()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  select(starts_with(\"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 2\n   country     continent\n   <fct>       <fct>    \n 1 Afghanistan Asia     \n 2 Afghanistan Asia     \n 3 Afghanistan Asia     \n 4 Afghanistan Asia     \n 5 Afghanistan Asia     \n 6 Afghanistan Asia     \n 7 Afghanistan Asia     \n 8 Afghanistan Asia     \n 9 Afghanistan Asia     \n10 Afghanistan Asia     \n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nSome additional options to select columns based \non a specific criteria include\n\n1. `ends_with()` = Select columns that end with \na character string\n2. `contains()` = Select columns that contain \na character string\n3. `matches()` = Select columns that match a \nregular expression\n4. `one_of()` = Select columns names that are \nfrom a group of names\n\n\n#### Selecting rows using `filter()`\n\nLet's say we only want the data from 2007. \n\nTo do this, we can use the `filter()` function \nto filter the rows for years in 2007. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year == \"2007\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142 × 6\n   country     continent  year lifeExp       pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>     <int>     <dbl>\n 1 Afghanistan Asia       2007    43.8  31889923      975.\n 2 Albania     Europe     2007    76.4   3600523     5937.\n 3 Algeria     Africa     2007    72.3  33333216     6223.\n 4 Angola      Africa     2007    42.7  12420476     4797.\n 5 Argentina   Americas   2007    75.3  40301927    12779.\n 6 Australia   Oceania    2007    81.2  20434176    34435.\n 7 Austria     Europe     2007    79.8   8199783    36126.\n 8 Bahrain     Asia       2007    75.6    708573    29796.\n 9 Bangladesh  Asia       2007    64.1 150448339     1391.\n10 Belgium     Europe     2007    79.4  10392226    33693.\n# ℹ 132 more rows\n```\n:::\n:::\n\n\n**Note**: you can use the boolean operators \n(e.g. `>`, `<`, `>=`, `<=`, `!=`, `%in%`) \nto create logical tests.\n\nFor example, if we wanted only years \nafter 2014, we can add a second criteria: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year > 1977)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 852 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1982    39.9 12881816      978.\n 2 Afghanistan Asia       1987    40.8 13867957      852.\n 3 Afghanistan Asia       1992    41.7 16317921      649.\n 4 Afghanistan Asia       1997    41.8 22227415      635.\n 5 Afghanistan Asia       2002    42.1 25268405      727.\n 6 Afghanistan Asia       2007    43.8 31889923      975.\n 7 Albania     Europe     1982    70.4  2780097     3631.\n 8 Albania     Europe     1987    72    3075321     3739.\n 9 Albania     Europe     1992    71.6  3326498     2497.\n10 Albania     Europe     1997    73.0  3428038     3193.\n# ℹ 842 more rows\n```\n:::\n:::\n\n\n\n#### Use `mutate()` to add new variables\n\n`mutate()` is a function that defines and inserts new \nvariables into a tibble. You can refer to existing\nvariables by name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>%\n    filter(year==2007) %>% \n    select(-continent) %>%\n    mutate(gdp = pop * gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142 × 6\n   country      year lifeExp       pop gdpPercap           gdp\n   <fct>       <int>   <dbl>     <int>     <dbl>         <dbl>\n 1 Afghanistan  2007    43.8  31889923      975.  31079291949.\n 2 Albania      2007    76.4   3600523     5937.  21376411360.\n 3 Algeria      2007    72.3  33333216     6223. 207444851958.\n 4 Angola       2007    42.7  12420476     4797.  59583895818.\n 5 Argentina    2007    75.3  40301927    12779. 515033625357.\n 6 Australia    2007    81.2  20434176    34435. 703658358894.\n 7 Austria      2007    79.8   8199783    36126. 296229400691.\n 8 Bahrain      2007    75.6    708573    29796.  21112675360.\n 9 Bangladesh   2007    64.1 150448339     1391. 209311822134.\n10 Belgium      2007    79.4  10392226    33693. 350141166520.\n# ℹ 132 more rows\n```\n:::\n:::\n\n\n\n#### Arrange or re-order rows using `arrange()`\n\nTo arrange (or re-order) rows by a particular \ncolumn such as the population, list the name of \nthe column you want to arrange the rows by\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>%     \n    filter(year==2007) %>%\n    select(-continent) %>%\n    mutate(gdp = pop * gdpPercap) %>% \n    arrange(gdp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142 × 6\n   country                   year lifeExp     pop gdpPercap         gdp\n   <fct>                    <int>   <dbl>   <int>     <dbl>       <dbl>\n 1 Sao Tome and Principe     2007    65.5  199579     1598.  319014077.\n 2 Comoros                   2007    65.2  710960      986.  701111696.\n 3 Guinea-Bissau             2007    46.4 1472041      579.  852652874.\n 4 Djibouti                  2007    54.8  496374     2082. 1033689705.\n 5 Gambia                    2007    59.4 1688359      753. 1270911775.\n 6 Liberia                   2007    45.7 3193942      415. 1323912407.\n 7 Central African Republic  2007    44.7 4369038      706. 3084613079.\n 8 Eritrea                   2007    58.0 4906585      641. 3146934084.\n 9 Lesotho                   2007    42.6 2012649     1569. 3158513357.\n10 Burundi                   2007    49.6 8390505      430. 3608510288.\n# ℹ 132 more rows\n```\n:::\n:::\n\n\n\nSo if we wanted to figure out what were the top three\ncountries with the largest `gdpPercap` in 2007, we could \nuse the `desc()` function inside of\n`arrange()` to order rows in a descending order. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n  filter(year == 2007) %>% \n  arrange(desc(gdpPercap)) %>% \n  head(n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  country   continent  year lifeExp     pop gdpPercap\n  <fct>     <fct>     <int>   <dbl>   <int>     <dbl>\n1 Norway    Europe     2007    80.2 4627926    49357.\n2 Kuwait    Asia       2007    77.6 2505559    47307.\n3 Singapore Asia       2007    80.0 4553009    47143.\n```\n:::\n:::\n\n\n\n# Data visualization \n\n## ggplot2\n\n[`ggplot2`](http://ggplot2.org) is a powerful data exploration and \nvisualization package that can create graphics in R. It was created by \n[Hadley Wickham](http://had.co.nz) when he was a graduate student at \nIowa State University and is based on the principals defined in the \n[Grammar of Graphics](http://www.amazon.com/The-Grammar-Graphics-Statistics-Computing/dp/0387245448).  \n\n\n#### Why is it useful?\n\nThe idea of the Grammar of Graphics is to break the graph into components \nand handle the components of a graph separately. The `ggplot2` package \ncontains a set of functions that allow us to build the features of the\ngraph in a series of layers for versatility and control. \n\nThere are two main plotting functions in `ggplot2`: \n\n* `qplot()` = a quick plot, similar to the `plot()` function in base R\n* `ggplot()` = a \"grammar of graphics\" (gg) plot which is made up two \ncomponents (a `ggplot()` object and at least one `geom` layer)\n\nThe `ggplot2` is loaded whenever you load `tidyverse`, but you can \nalways load it formally. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n## Life expectancy and GDP per capita\n\nTo try and answer our first question we will make a _scatterplot_. \nWe will do this for the latest entry in our database which is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax( gapminder$year )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2007\n```\n:::\n:::\n\n\nWe will first make a quick plot of these two variables. \n\n#### `qplot`\n\nThe `qplot` function  allows us to produce simple plots, similar to \n`plot` in base R.  The main input of `qplot` is an `x` and `y` argument, \nbut it also accepts a data set (`data`) where the `x` and `y` variables are \nlocated.  \n\nTo create a scatter-plot of life expectancy versus GDP per capita \nfor 2007, we start by creating a subset of the data with only the 2007 year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- filter(gapminder, year==2007)\n```\n:::\n\n\nWhy does this not work?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqplot(x = gdpPercap, y = lifeExp) \n```\n:::\n\n\nWe need to specify where to get these values from. Instead, we can\nuse the vectors of `dat` directly\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## need to specify where variables are located\nqplot(x = dat$gdpPercap, y = dat$lifeExp) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nHowever, a cleaner way to do this does not define `dat` and instead uses the `data` argument:\n\n::: {.cell}\n\n```{.r .cell-code}\n## instead of having to specify name of data frame each time, just list it once\nqplot(x = gdpPercap, y = lifeExp, data = filter(gapminder, year==2007))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\nIf youw ant to add labels to the x and y axis, you can use the \n`xlab` and `ylab` arguments. You can read the help file to \ncheck out other arguments available in the function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nqplot(x = gdpPercap, y = lifeExp, \n      data = filter(gapminder, year==2007), \n      xlab = \"GDP per Capita\", \n      ylab = \"Life Expectancy\", \n      main = \"Data from Gapminder\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nFrom this plot, we see that there is a wide variability in \nlife expectancy for the lower income countries and then \nsomewhat of a positive trend. However, there are many \ncountries with incomes below 5,000 dollars per person and \nit is hard to see differences between these. Next we \nwill now learn about the grammar of graphics and create \na series of visualizations.\n\n## `ggplot`\n\nThis function is the implementation of the \"Grammar of Graphics\" \nthat allows us to build layers of graphical elements to produce\nplots. As explained by Hadley Wickham\n\n> the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinates system.\n\n#### Terminology \n* **ggplot** - the main function where you specify the data set and variables to plot (this is where we define the `x` and\n`y` variable names)\n* **geoms** - geometric objects\n    * e.g. `geom_point()`, `geom_bar()`, `geom_line()`, `geom_histogram()`\n* **aes** - aesthetics\n    * shape, transparency, color, fill, linetype\n* **scales** - define how your data will be plotted\n    * continuous, discrete, log, etc\n\nThere are three ways to initialize a `ggplot()` object. \n\nAn empty ggplot object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()         \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nA ggplot object associated with a dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n    filter(year==2007) %>% \n    ggplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nor a ggplot object with a dataset and `x` and `y` defined\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n    filter(year==2007) %>% \n    ggplot(aes(x=gdpPercap, y = lifeExp))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n#### Creating your first ggplot()\n\nWe just used the function `aes()` which is an aesthetic mapping \nfunction inside the `ggplot()` object. We use this function to \nspecify plot attributes (e.g. `x` and `y` variable names) that \nwill not change as we add more layers.  \n\nAnything that goes in the `ggplot()` object becomes\na global setting.  From there, we use the `geom` objects to add \nmore layers to the base `ggplot()` object. \nThese will define what we are interested in \nillustrating using the data.  \n\nEarlier we noticed that there are many countries with \nincomes below 5,000 dollars per person and it is hard to see \ndifferences between these. We can examine just this variable \nwith a histogram. Here we would use a different geometry:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n    filter(year==2007) %>% \n    ggplot(aes(x=gdpPercap)) + geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nThe histogram shows very large tails. We may do better by \ntransforming the data. For data like this, the log \ntransformation seems to work well. It also has a nice economic \ninterpretation related to percent growth: in $log_{10}$ a \nchange of 1 means the country is 10 times richer.\n\nSo how do we make the x-axis in the log scale? It is convenient to have [this](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf) cheat sheet around when using ggplot2. From there we see that `scale_x_log10` does what we want.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n    filter(year==2007) %>% \n    ggplot(aes(x=gdpPercap)) + \n    geom_histogram(bins=25) + \n    scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nWe no longer see extreme tails. The scatter plot now looks much more informative:\n\nNow we can remake the scatter plot but now make \nsure the x-axis is in a log-scale\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n    filter(year==2007) %>% \n    ggplot(aes(x=gdpPercap, y = lifeExp)) +\n    geom_point() + scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nWe can also do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder %>% \n    filter(year==2007) %>% \n    ggplot(aes(x=log10(gdpPercap), y = lifeExp)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nWe can also use other really great packages, such as `ggrepel`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\ngapminder %>% \n    filter(year==2007) %>% \n    ggplot(aes(x=gdpPercap, y = lifeExp)) +\n    geom_point(color = 'red',) + scale_x_log10() + \n    geom_text_repel(aes(label = country), size = 2) +\n  theme_classic() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: ggrepel: 53 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nNow you are ready to make presentation quality data visualizations! \n\n# Cheatsheets\n\n* [Data Visualization with ggplot2 from RStudio](https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf)\n\n\n## Confessions and countermeasures with the `tidyverse`  \n\nHere are the awesome [slides](2019-03-13-tidyverse-confessions.pdf) from \nRachael Workman (PhD student in \n[Biochemistry, Cellular and Molecular Biology](http://bcmb.bs.jhmi.edu) (BCMB) program) \nwhere she discusses  \n_Confessions and Countermeasures: my not ideal R habits and how the Tidyverse resolved them_\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}