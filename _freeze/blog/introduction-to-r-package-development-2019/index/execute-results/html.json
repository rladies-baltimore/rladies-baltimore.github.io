{
  "hash": "a3ae21245d2072e13ed788a78cb6aa69",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R Package Development 2019\"\nauthor: \"Stephanie Hicks\"\ndate: \"2019-05-20\"\ncategories: [blog, r-package]\n---\n\n\n# Motivation\n\nIn this tutorial, you are going to create your \nown package using the `usethis` workflow R package. \nFor our purposes, we are using the code provide on the \n[`usethis`](https://usethis.r-lib.org) website and the \n[blog from Emil Hvitfeldt](https://www.hvitfeldt.me/blog/usethis-workflow-for-package-development/). \n\nThis package is great because it automates repetitive tasks that \narise during project setup and development, both for \nR packages and non-package projects.\n\n## Getting started with the `usethis` package \n\n### Installation\n\nInstall the released version of `usethis` from CRAN:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\n```\n:::\n\n\nOr install the development version from GitHub with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\ndevtools::install_github(\"r-lib/usethis\")\n```\n:::\n\n\nYou may also need these packages: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"testthat\")\ninstall.packages(\"spelling\")\n```\n:::\n\n\n\n# Creating your R package using `usethis`\n\nMost `use_*()` functions operate on the active project:\nliterally, a directory on your computer. If you have just\nused `usethis` to create a new package or project, that\nwill be the active project. Otherwise, `usethis` verifies\nthat current working directory is or is below a valid \nproject directory and that becomes the active project.\n\nA few `usethis` functions have no strong connections to \nprojects and will expect you to provide a path.\n\nBelow is a quick look at how `usethis` can help to set up a \npackage. But remember, many `usethis` functions are also \napplicable to analytical projects that are not packages.\n\nLet's load the library \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis)\n```\n:::\n\n\nNext we create a path to a temporary folder and call the \npackage `mypkg`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- file.path(tempdir(), \"mypkg\")\npath\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T//RtmpKhDIkN/mypkg\"\n```\n:::\n:::\n\n\nThen, we use the `create_package()` function \nto create the skeleton of this package. \n\n## Create the package \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_package(path)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Creating '/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/'\n✔ Setting active project to '/private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg'\n✔ Creating 'R/'\n✔ Writing 'DESCRIPTION'\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nPackage: mypkg\nTitle: What the Package Does (One Line, Title Case)\nVersion: 0.0.0.9000\nAuthors@R (parsed):\n    * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)\nDescription: What the package does (one paragraph).\nLicense: `use_mit_license()`, `use_gpl3_license()` or friends to pick a\n    license\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Writing 'NAMESPACE'\n✔ Setting active project to '<no active project>'\n```\n:::\n:::\n\n\nIf you are inside of RStudio, this will (hopefully)\nopen up a new RStudio session. Also, `usethis` is\nquite chatty, explaining what it’s doing \nand assigning you tasks. For example, \n\n✔ indicates something usethis has done for you. \n\n● indicates that you’ll need to do some work yourself.\n\n**For this tutorial, we are not in an interactive session**. \nSo we use the `proj_activate(path)` function with the \n`path` argument to change the working directory to the \ntemporary path that we've created. \n\n**NOTE**: You only need to run `proj_activate(path)` \nif you are not in an interactive session. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nproj_activate(path)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Setting active project to '/private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg'\n✔ Changing working directory to '/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/'\n```\n:::\n:::\n\n\n## Setting up git/github\n\nWe won't do it here, but you can use the functions \nbelow to help set link the pakckage to GitHub. If you \nwant to explore this, check out \n[Jenny Bryan tutorial on getting setup](https://github.com/r-lib/usethis/blob/master/vignettes/articles/usethis-setup.Rmd). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_git()\nuse_github()\n```\n:::\n\n\n## One time modifications\n\nNow that we are up and running there is a bunch of \nthings we should do before we start writing code. \nFirstly we will go over all the actions that only \nhave to be done once and get those out of the way.\n\n\n### Setting up your license\n\nThere are several types of licenses you can pick from, \nfor example \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_mit_license()\nuse_gpl3_license()\nuse_apl2_license()\nuse_cc0_license()\n```\n:::\n\n\nLet's select the MIT license \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_mit_license(\"Margaret Taub\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Adding 'MIT + file LICENSE' to License\n✔ Writing 'LICENSE'\n✔ Writing 'LICENSE.md'\n✔ Adding '^LICENSE\\\\.md$' to '.Rbuildignore'\n```\n:::\n:::\n\n\nThe choice of license is beyond the scope of the tutorial, \nbut we [refer readers here](http://r-pkgs.had.co.nz/description.html#license) \nto learn more about types of licenses. \n\n\n### Add README.md files \n\nNow we add the readme files, this is done using\nthe `use_news_md()` function. This will create a \nreadme.md file that you can edit and knit \nas you normally would.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_news_md()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Writing 'NEWS.md'\n```\n:::\n:::\n\n\n### Adding continuous integration (optional)\n\nNext we will setup some continuous integration. \nThis is completely optional, but it's recommended. \nA nice intro to this topic is from \n[Julia Silge](https://juliasilge.com/blog/beginners-guide-to-travis/). \n\nFor a quick summary, we will extract a section from\nher blog post: \n\n> \"If you have written an R package, you probably have \ngotten into the habit of running R CMD check on a \n(hopefully) regular basis to check for common problems. \nIt automatically detects lots of problems that can arise \nthat you might not otherwise notice. Also you probably \nhave put your package on GitHub, for version control and \nalso to be able to share your code with other people and\ntrack issues and whatnot. The idea behind continuous \nintegration is that CI will automatically run R CMD check \n(along with your tests, etc.) every time you push a commit\nto GitHub. You don’t have to remember to do this; CI \nautomatically checks the code after every commit. Travis-CI\nis a continuous integration service that builds and tests \nprojects that are hosted on GitHub; if your R package is \nopen source (i.e., not private), then using Travis-CI is free.\" \n\nTo set up CI, use the following `usethis` functions: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_travis()\nuse_appveyor()\nuse_coverage(type = c(\"codecov\"))\n```\n:::\n\n\nAgain, this is outside the scope of this tutorial, but we \nleave it here for you to explore. \n\n### Add unit testing\n\nYou will most likely also want to include \nunit testing, this can be achieved using the \n[`testthat`](https://cran.r-project.org/package=testthat)\npackage. To do this, use the `use_testthat()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_testthat()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Adding '3' to Config/testthat/edition\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\n```\n:::\n\n```{.r .cell-code}\nuse_test(\"my-test\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Writing 'tests/testthat/test-my-test.R'\n• Edit 'tests/testthat/test-my-test.R'\n```\n:::\n:::\n\n\n### Add spell check\nNext we will add spell checking to our workflow, this is done with\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"spelling\")\nuse_spell_check()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Adding 'spelling' to Suggests field in DESCRIPTION\n✔ Adding 'en-US' to Language\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNo changes required to /private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/inst/WORDLIST\nUpdated /private/var/folders/7r/39cms9lx3rncwj6f5myx2fz40000gn/T/RtmpKhDIkN/mypkg/tests/spelling.R\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n• Run `devtools::check()` to trigger spell check\n```\n:::\n:::\n\n\nMake sure that the spelling package is installed before running.\n\n### Create data folder and objects\nIf you are going to include data in your package, you \nwould want to include a data-raw folder where the data\nis created/formatted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_data_raw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Creating 'data-raw/'\n✔ Adding '^data-raw$' to '.Rbuildignore'\n✔ Writing 'data-raw/DATASET.R'\n• Finish the data preparation script in 'data-raw/DATASET.R'\n• Use `usethis::use_data()` to add prepared data to package\n```\n:::\n\n```{.r .cell-code}\nx <- 1\ny <- 2\nuse_data(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Adding 'R' to Depends field in DESCRIPTION\n✔ Creating 'data/'\n✔ Setting LazyData to 'true' in 'DESCRIPTION'\n✔ Saving 'x', 'y' to 'data/x.rda', 'data/y.rda'\n• Document your data (see 'https://r-pkgs.org/data.html')\n```\n:::\n:::\n\n\n### Add NEWS file\n\nLastly if you plan on doing a little larger project a \nNEWS file is very handy to keep track on what is\nhappening in your package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_news_md()\n```\n:::\n\n\n### Add packages to DESCRIPTION file\nYou can also add packages to the DESCRIPTION file \n\nFor example, here we are adding the `MASS` package \nto the Suggests description field. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_package(\"MASS\", \"Suggests\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Adding 'MASS' to Suggests field in DESCRIPTION\n• Use `requireNamespace(\"MASS\", quietly = TRUE)` to test if package is installed\n• Then directly refer to functions with `MASS::fun()`\n```\n:::\n\n```{.r .cell-code}\nuse_package(\"dplyr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Adding 'dplyr' to Imports field in DESCRIPTION\n• Refer to functions with `dplyr::fun()`\n```\n:::\n:::\n\n\n### Set up documentation files \n\nWe can set up the documention files using Roxygen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_roxygen_md()\n```\n:::\n\n\n\n## Multiple time modifications\n\nNow that we have setup all the basics, \nthe general development can begin.\n\nYou typical workflow will be repeating the following\nsteps in the order that suits your flow\n\n* Write some code\n* Restart R Session Cmd+Shift+F10 (Ctrl+Shift+F10 for Windows)\n* Build and Reload Cmd+Shift+B (Ctrl+Shift+B for Windows)\n* Test Package Cmd+Shift+T (Ctrl+Shift+T for Windows)\n* Check Package Cmd+Shift+E (Ctrl+Shift+E for Windows)\n* Document Package Cmd+Shift+D (Ctrl+Shift+D for Windows)\n\n### Create `.R` files and unit tests for functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_r(\"function_name\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n• Edit 'R/function_name.R'\n```\n:::\n:::\n\n\nThis function is very important and you will using it a lot, \nnot only will it create the files you save your functions \nin, but it will also open the files if they are already \ncreated, this makes navigating your R files much easier. \nOnce you have created your function it is time to add \nsome tests! This is done using the `use_test()` function,\nand it works much the same way as the `use_r()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_test(\"function_name\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Writing 'tests/testthat/test-function_name.R'\n• Edit 'tests/testthat/test-function_name.R'\n```\n:::\n:::\n\n\n### Create a vignette \n\nAn vignette provides a nice piece of documentation once you have added a bunch of capabilities to your package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_vignette(\"my_cool_vignette\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Adding 'knitr' to Suggests field in DESCRIPTION\n✔ Adding 'rmarkdown' to Suggests field in DESCRIPTION\n✔ Adding 'knitr' to VignetteBuilder\n✔ Adding 'inst/doc' to '.gitignore'\n✔ Creating 'vignettes/'\n✔ Adding '*.html', '*.R' to 'vignettes/.gitignore'\n✔ Writing 'vignettes/my_cool_vignette.Rmd'\n• Edit 'vignettes/my_cool_vignette.Rmd'\n```\n:::\n:::\n\n\n# Summary\n\nYou should be off and running now! \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}