{
  "hash": "a449a03fcaef30364f65c6ce9d92bdcc",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Tidyverse with penguins\"\nauthor: \"Stephanie Hicks\"\ndate: \"2023-09-26\"\ncategories: [blog, tidyverse]\nformat:\n    html:\n        toc: true\n        toc-depth: 3\n---\n\n\n\n# Motivation\n\nThroughout this section we will be analyzing a dataset about penguins.\nThe name of the dataset is `palmerpenguins`, which is available as a CRAN package. \n\n\n::: {.cell layout-align=\"center\" show='true' fig.caption='Palmer penguins'}\n::: {.cell-output-display}\n![](figures/lter_penguins.png){fig-align='center' width=780px}\n:::\n:::\n\n\nTo install the `palmerpenguins` data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\")\n```\n:::\n\n\n\n## Loading data into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\n## Meet the `penguins` data frame or \"tibble\"\n\nBy loading the `palmerpenguins` package, we now have access to a \ndata frame called `penguins`. Get an overview of this with \n`str()`, which displays the structure of an object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n:::\n:::\n\n\n`str()` will provide a sensible description of almost anything and,\nworst case, nothing bad can actually happen. When in doubt, just \n`str()` some of the recently created objects to get some ideas a\nbout what to do next.\n\nWe could print the `penguins` object itself to screen. However, \nif you have used R before, you might be reluctant to do this, because\nlarge datasets just fill up your console and provide very little insight.\n\nThis is the first big win for **tibbles**. The \n[`tidyverse`](https://tidyverse.tidyverse.org) offers a special \ncase of R's default data frame: the \"tibble\", which is a nod to the \nactual class of these objects, `tbl_df`.\n\nNow we can boldly print `penguins` to screen! It is a \ntibble (and also a regular data frame) and the `tidyverse`\nprovides a nice print method that shows the most important \nstuff and doesn't fill up your Console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## see? it's still a regular data frame, but also a tibble\nclass(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n\nIf you are dealing with plain vanilla data frames, you can rein in data frame printing explicitly with `head()` and `tail()`. Or turn it into a tibble with `as_tibble()`!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n```{.r .cell-code}\ntail(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nMore ways to query basic info on a data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n```\n:::\n\n```{.r .cell-code}\nncol(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nlength(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\ndim(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 344   8\n```\n:::\n\n```{.r .cell-code}\nnrow(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 344\n```\n:::\n:::\n\n\nA statistical overview can be obtained with `summary()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n```\n:::\n:::\n\n\n:::{.callout-tip}\n\n# Bill dimensions\n\nThe culmen is the upper ridge of a bird’s bill. In the simplified penguins data, culmen length and depth are renamed as variables bill_length_mm and bill_depth_mm to be more intuitive.\n\nFor this penguin data, the culmen (bill) length and depth are measured as shown below\n\n\n::: {.cell layout-align=\"center\" show='true' fig.caption='Palmer penguins'}\n::: {.cell-output-display}\n![](figures/culmen_depth.png){fig-align='center' width=780px}\n:::\n:::\n\n\n:::\n\nAlthough we have not begun our formal coverage of \nvisualization yet, it's so important for data exploration\ndataset that we will make a few figures anyway. \nHere we use only base R graphics, which are very basic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bill_length_mm ~ flipper_length_mm, penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first-plots-base-R-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(bill_depth_mm ~ bill_length_mm, penguins)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/first-plots-base-R-2.png){width=672}\n:::\n:::\n\n\n\n\n# Welcome to the \"Tidyverse\"\n\nThe [tidyverse](https://www.tidyverse.org) is _\"an opinionated \ncollection of R packages designed for data science. All packages \nshare an underlying philosophy and common APIs.\"_ \n\nAnother way of putting it is that it's a set of packages \nthat are useful specifically for data manipulation, \nexploration and visualization with a common philosphy. \n\n## What is this common philosphy? \n\nThe common philosphy is called _\"tidy\"_ data. It is \na standard way of mapping the meaning of a dataset\nto its structure.\n\nIn _tidy_ data:\n\n* Each variable forms a column.\n* Each observation forms a row.\n* Each type of observational unit forms a table.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](http://r4ds.had.co.nz/images/tidy-1.png){width=95%}\n:::\n:::\n\n\nBelow, we are interested in transformating the table on \nthe right to the the table on the left, which is \nconsidered \"tidy\". \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](http://r4ds.had.co.nz/images/tidy-9.png){width=95%}\n:::\n:::\n\n\nWorking with tidy data is useful because it creates a structured way of\norganizing data values within a data set. This makes the data analysis \nprocess more efficient and simplifies the development of data analysis tools\nthat work together. In this way, you can focus on the problem you are\ninvestigating, rather than the uninteresting logistics of data.  \n\n## What is in the `tidyverse`? \n\nWe can install and load the set of R packages using \n`install.packages(\"tidyverse\")` function. \n\nWhen we load the tidyverse package using `library(tidyverse)`, \nthere are six core R packages that load:\n\n* [readr](http://readr.tidyverse.org), for data import.\n* [tidyr](http://tidyr.tidyverse.org), for data tidying.\n* [dplyr](http://dplyr.tidyverse.org), for data wrangling.\n* [ggplot2](http://ggplot2.tidyverse.org), for data visualisation.\n* [purrr](http://purrr.tidyverse.org), for functional programming.\n* [tibble](http://tibble.tidyverse.org), for tibbles, a modern re-imagining of data frames.\n\nHere, we load in the tidyverse. \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nBecause these packages all share the \"tidy\" philosophy, \nthe data analysis workflow is easier as you move from \npackage to package. \n\nToday we will focus on `dplyr` and `ggplot2`, for \ndata wrangling and visualization, but definitely check \nout the other packages such as `readr`,\n`tidyr`, R packages to import data, \nto transform data to the \"tidy\" format. \n\n\n# Data wrangling \n\nIn the real world, analyzing data rarely involves \ndata that can be easily imported and ready for \nanalysis. According to Wikipedia:\n\n> Data munging or data wrangling is loosely the process \nof manually converting or mapping data from one \"raw\" \nform into another format that allows for more convenient \nconsumption of the data with the help of semi-automated \ntools.\n\nAs you will see in class, one of the most \ntime-consuming aspects of the data analysis \nprocess is \"data wrangling\". This is also \nis a trendy term for \n_cleaning up a messy data set_. \n\nR provides incredibly powerful and flexible language \nfor data wrangling. However, the syntax is somewhat \nhard to get used to. We will therefore introducing \na package that makes the syntax much more like \nthe English language. This package is `dplyr`. \n\n## The `dplyr` R package\n\n[`dplyr`](http://cran.rstudio.com/web/packages/dplyr/vignettes/introduction.html) \nis a powerful R-package to transform and summarize \ntabular data with rows and columns. \n\nThe package contains a set of functions \n(or \"verbs\") to perform common data manipulation\noperations such as filtering for rows, selecting \nspecific columns, re-ordering rows, adding new \ncolumns and summarizing data. \n\nIn addition, `dplyr` contains a useful function to\nperform another common task which is the is the \n\"split-apply-combine\" concept.  We will discuss \nthat in a little bit. \n\n### How does it compare to using base functions R?\n\nIf you are familiar with R, you are probably familiar \nwith base R functions such as `split()`, `subset()`, \n`apply()`, `sapply()`, `lapply()`, `tapply()` and \n`aggregate()`. Compared to base functions in R, the \nfunctions in `dplyr` are easier to work with, are \nmore consistent in the syntax and are targeted for \ndata analysis around data frames instead of just vectors. \n\nThe important `dplyr` verbs to remember are: \n\n`dplyr` verbs | Description\n--- | ---\n`select()` | select columns \n`filter()` | filter rows\n`arrange()` | re-order or arrange rows\n`mutate()` | create new columns\n`summarize()` | summarize values\n`group_by()` | allows for group operations in the \"split-apply-combine\" concept\n\n\n\n## Pipe operator: |>\n\nBefore we go any futher, let's introduce the \npipe operator: `|>`.\n\nThis operator available in base R allows you to pipe the output \nfrom one function to the input of another\nfunction. Instead of nesting functions \n(reading from the inside to the \noutside), the idea of of piping is to \nread the functions from left to right. \n\n## `dplyr` verbs in action\n\nThe two most basic functions are `select()` and \n`filter()` which selects columns and filters \nrows, respectively. \n\n### Selecting columns using `select()`\n\nTo select two columns (`species` and `island`), \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(species, island) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 2\n   species island   \n   <fct>   <fct>    \n 1 Adelie  Torgersen\n 2 Adelie  Torgersen\n 3 Adelie  Torgersen\n 4 Adelie  Torgersen\n 5 Adelie  Torgersen\n 6 Adelie  Torgersen\n 7 Adelie  Torgersen\n 8 Adelie  Torgersen\n 9 Adelie  Torgersen\n10 Adelie  Torgersen\n# ℹ 334 more rows\n```\n:::\n:::\n\n\nTo select all the columns *except* a \nspecific column, use the \"-\" (subtraction) operator \n(also known as negative indexing). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n    select(-species, -island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 6\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex     year\n            <dbl>         <dbl>             <int>       <int> <fct>  <int>\n 1           39.1          18.7               181        3750 male    2007\n 2           39.5          17.4               186        3800 female  2007\n 3           40.3          18                 195        3250 female  2007\n 4           NA            NA                  NA          NA <NA>    2007\n 5           36.7          19.3               193        3450 female  2007\n 6           39.3          20.6               190        3650 male    2007\n 7           38.9          17.8               181        3625 female  2007\n 8           39.2          19.6               195        4675 male    2007\n 9           34.1          18.1               193        3475 <NA>    2007\n10           42            20.2               190        4250 <NA>    2007\n# ℹ 334 more rows\n```\n:::\n:::\n\n\nThe function `select()` is much more \npowerful though. To select a range \nof columns by name, use the \":\" (colon) operator\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(bill_length_mm:body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            <dbl>         <dbl>             <int>       <int>\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# ℹ 334 more rows\n```\n:::\n:::\n\n\nTo select all columns that end with the \ncharacter string \"c\", use the function `ends_with()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(ends_with(\"mm\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   bill_length_mm bill_depth_mm flipper_length_mm\n            <dbl>         <dbl>             <int>\n 1           39.1          18.7               181\n 2           39.5          17.4               186\n 3           40.3          18                 195\n 4           NA            NA                  NA\n 5           36.7          19.3               193\n 6           39.3          20.6               190\n 7           38.9          17.8               181\n 8           39.2          19.6               195\n 9           34.1          18.1               193\n10           42            20.2               190\n# ℹ 334 more rows\n```\n:::\n:::\n\n\nSome additional options to select columns based \non a specific criteria include\n\n1. `starts_with()` = Select columns that start with \na character string\n2. `contains()` = Select columns that contain \na character string\n3. `matches()` = Select columns that match a \nregular expression\n4. `one_of()` = Select columns names that are \nfrom a group of names\n\n\n### Selecting rows using `filter()`\n\nLet's say we only want the data from a specific species. \n\nTo do this, we can use the `filter()` function \nto filter the rows for the Adelie species. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n**Note**: you can use the boolean operators \n(e.g. `>`, `<`, `>=`, `<=`, `!=`, `%in%`) \nto create logical tests.\n\nFor example, if we wanted only species with a bill length of \ngreater than or equal to 40, we can add a second criteria: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(species == \"Adelie\") |> \n  filter(bill_length_mm >= 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 51 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           40.3          18                 195        3250\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           41.1          17.6               182        3200\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Torgersen           46            21.5               194        4200\n 6 Adelie  Biscoe              40.6          18.6               183        3550\n 7 Adelie  Biscoe              40.5          17.9               187        3200\n 8 Adelie  Biscoe              40.5          18.9               180        3950\n 9 Adelie  Dream               40.9          18.9               184        3900\n10 Adelie  Dream               42.2          18.5               180        3550\n# ℹ 41 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n\n### Use `mutate()` to add new variables\n\n`mutate()` is a function that defines and inserts new \nvariables into a tibble. You can refer to existing\nvariables by name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  mutate(new_ratio = body_mass_g / bill_length_mm) |> \n  select(species, island, new_ratio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species island    new_ratio\n   <fct>   <fct>         <dbl>\n 1 Adelie  Torgersen      95.9\n 2 Adelie  Torgersen      96.2\n 3 Adelie  Torgersen      80.6\n 4 Adelie  Torgersen      NA  \n 5 Adelie  Torgersen      94.0\n 6 Adelie  Torgersen      92.9\n 7 Adelie  Torgersen      93.2\n 8 Adelie  Torgersen     119. \n 9 Adelie  Torgersen     102. \n10 Adelie  Torgersen     101. \n# ℹ 334 more rows\n```\n:::\n:::\n\n\n\n### Arrange or re-order rows using `arrange()`\n\nTo arrange (or re-order) rows by a particular \ncolumn such as the bill length, list the name of \nthe column you want to arrange the rows by\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  arrange(bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Dream               32.1          15.5               188        3050\n 2 Adelie  Dream               33.1          16.1               178        2900\n 3 Adelie  Torgersen           33.5          19                 190        3600\n 4 Adelie  Dream               34            17.1               185        3400\n 5 Adelie  Torgersen           34.1          18.1               193        3475\n 6 Adelie  Torgersen           34.4          18.4               184        3325\n 7 Adelie  Biscoe              34.5          18.1               187        2900\n 8 Adelie  Torgersen           34.6          21.1               198        4400\n 9 Adelie  Torgersen           34.6          17.2               189        3200\n10 Adelie  Biscoe              35            17.9               190        3450\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nIf we wanted to arrange in a descending order, we could \nuse the `desc()` function inside of\n`arrange()` to order rows in a descending order. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  arrange(desc(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo    Biscoe           59.6          17                 230        6050\n 2 Chinstrap Dream            58            17.8               181        3700\n 3 Gentoo    Biscoe           55.9          17                 228        5600\n 4 Chinstrap Dream            55.8          19.8               207        4000\n 5 Gentoo    Biscoe           55.1          16                 230        5850\n 6 Gentoo    Biscoe           54.3          15.7               231        5650\n 7 Chinstrap Dream            54.2          20.8               201        4300\n 8 Chinstrap Dream            53.5          19.9               205        4500\n 9 Gentoo    Biscoe           53.4          15.8               219        5500\n10 Chinstrap Dream            52.8          20                 205        4550\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n\n# Data visualization \n\n## ggplot2\n\n[`ggplot2`](http://ggplot2.org) is a powerful data exploration and \nvisualization package that can create graphics in R. It was created by \n[Hadley Wickham](http://had.co.nz) when he was a graduate student at \nIowa State University and is based on the principals defined in the \n[Grammar of Graphics](http://www.amazon.com/The-Grammar-Graphics-Statistics-Computing/dp/0387245448).  \n\n\n### Why is it useful?\n\nThe idea of the Grammar of Graphics is to break the graph into components \nand handle the components of a graph separately. The `ggplot2` package \ncontains a set of functions that allow us to build the features of the\ngraph in a series of layers for versatility and control. \n\nThere are two main plotting functions in `ggplot2`: \n\n* `qplot()` = a quick plot, similar to the `plot()` function in base R\n* `ggplot()` = a \"grammar of graphics\" (gg) plot which is made up two \ncomponents (a `ggplot()` object and at least one `geom` layer)\n\nThe `ggplot2` is loaded whenever you load `tidyverse`, but you can \nalways load it formally. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n## Flipper and bill length\n\nLet's make a scatter plot of the flipper and bill length for each penguin. \nWe will first make a quick plot of these two variables. \n\n#### `qplot`\n\nThe `qplot` function  allows us to produce simple plots, similar to \n`plot` in base R.  The main input of `qplot` is an `x` and `y` argument, \nbut it also accepts a data set (`data`) where the `x` and `y` variables are \nlocated.  \n\n:::{.callout-note}\n\nWhy does this not work?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqplot(x = flipper_length_mm, y = bill_length_mm) \n```\n:::\n\n\n:::\n\nWe need to specify where to get these values from. Instead, we can\nuse the vectors of `penguins` directly\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## need to specify where variables are located\nqplot(x = penguins$flipper_length_mm, y = penguins$bill_length_mm) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nHowever, a cleaner way to do this is to use the `data` argument:\n\n::: {.cell}\n\n```{.r .cell-code}\nqplot(x = flipper_length_mm, y = bill_length_mm, data = penguins)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\nIf youw ant to add labels to the x and y axis, you can use the \n`xlab` and `ylab` arguments. You can read the help file to \ncheck out other arguments available in the function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nqplot(x = flipper_length_mm, y = bill_length_mm, \n      data = penguins,\n      xlab = \"Flipper length (mm)\", \n      ylab = \"Bill length (mm)\", \n      main = \"Data from palmerpenguins R package\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nFrom this plot, we see that there is a positive relationship\nbetween the two variables. However, there seems to groups of \npenguins. Next, we will learn how to color the points using \nsomething called the grammar of graphics and create  \na series of visualizations.\n\n## The `ggplot()` function\n\nThis function is the implementation of the \"Grammar of Graphics\" \nthat allows us to build layers of graphical elements to produce\nplots. As explained by Hadley Wickham\n\n> the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinates system.\n\n#### Terminology \n\n* **ggplot** - the main function where you specify the data set and variables to plot (this is where we define the `x` and\n`y` variable names)\n* **geoms** - geometric objects\n    * e.g. `geom_point()`, `geom_bar()`, `geom_line()`, `geom_histogram()`\n* **aes** - aesthetics\n    * shape, transparency, color, fill, linetype\n* **scales** - define how your data will be plotted\n    * continuous, discrete, log, etc\n\nThere are three ways to initialize a `ggplot()` object. \n\nAn empty ggplot object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()         \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nA ggplot object associated with a dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nor a ggplot object with a dataset and `x` and `y` defined\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n#### Creating your first ggplot()\n\nWe just used the function `aes()` which is an aesthetic mapping \nfunction inside the `ggplot()` object. We use this function to \nspecify plot attributes (e.g. `x` and `y` variable names) that \nwill not change as we add more layers.  \n\nAnything that goes in the `ggplot()` object becomes\na global setting.  From there, we use the `geom` objects to add \nmore layers to the base `ggplot()` object. \nThese will define what we are interested in \nillustrating using the data.  \n\nEarlier we noticed that there was a positive trend between \nflipper and bill length, but there seemed to be groups of \npoints. Let's examine this plot with a `geom` called \n`geom_poin()` which is the default when you provide \nboth a `x` and `y` variable in the `aes()` function \nand add color: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm)) + \n  geom_point(aes(color = species))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nNow we see there groups of points are different species of penguins. \n\nWe can also do cool things like there where we add a linear regression line \nover each species of penguin to see the relationship between the two variables. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, \n             y = bill_length_mm, \n             group = species)) + \n  geom_point(aes(color = species)) + \n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\nWe hope you enjoyed learning about the Tidyverse, data wrangling, and data visualization using a dataset about penguins! \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}